# coordinator_agent.py
from langchain_groq import ChatGroq
from dotenv import load_dotenv
import os
import re

load_dotenv()


# client = Groq(
#             api_key=os.getenv("GROQ_API")
#               )
llm = ChatGroq(
    model_name="llama3-70b-8192",  # ou "mixtral-8x7b-32768" selon ton choix
    temperature=0,
    api_key=os.getenv("GROQ_API"),  # pense √† configurer ta cl√© API Groq
)


def coordinator_agent(question: str) -> list[str]:
    """
    Analyse la question et retourne une liste des agents √† appeler dans l'ordre.
    """
    # system_prompt = """
    # Tu es un orchestrateur intelligent pour un chatbot m√©dical.
    # Ta t√¢che est de d√©terminer quels agents sp√©cialis√©s doivent √™tre sollicit√©s
    # pour r√©pondre efficacement √† une question utilisateur.

    # - Agents disponibles :
    #   - clinical_trials
    #   - treatments
    #   - diagnosis
    #   - generaliste
    #   - scientific_summary

    # Donne une liste ordonn√©e d'agents pertinents.
    # Si plusieurs agents peuvent travailler en parall√®le, regroupe-les dans un m√™me bloc.
    # Exemple : [["clinical_trials", "treatments"], ["diagnosis"], ["generaliste"]]
    # """
    system_prompt = """
    Tu es un orchestrateur intelligent pour un chatbot m√©dical.
    Ta t√¢che est de d√©terminer quels agents sp√©cialis√©s doivent √™tre sollicit√©s
    pour r√©pondre efficacement √† une question utilisateur.

    - Agents disponibles :
    - clinical_trials (cherche des essais cliniques pertinents)
    - treatments (trouve des traitements adapt√©s)
    - diagnosis (aide √† poser un diagnostic)
    - scientific_summary (fournit un r√©sum√© scientifique)
    - generaliste (r√©pond de mani√®re g√©n√©rale √† tout type de question)

    ‚ö†Ô∏è Attention :
    - √âvite d'ajouter 'generaliste' si les agents sp√©cialis√©s suffisent √† r√©pondre.
    - Ajoute 'generaliste' **uniquement si aucun agent sp√©cialis√© n'est pertinent** ou si la question est tr√®s g√©n√©rale.
    - Donne une liste ordonn√©e d'agents pertinents.
    - Si plusieurs agents peuvent travailler en parall√®le, regroupe-les dans un m√™me bloc.

    Format attendu :
    Une liste Python du type :
    [["clinical_trials", "treatments"], ["diagnosis"]]

    Exemple :
    - Question : Quels sont les traitements pour le cancer du sein ?
    R√©ponse : [["treatments"]]

    - Question : Quels essais cliniques sont disponibles pour l'Alzheimer ?
    R√©ponse : [["clinical_trials"]]

    - Question : Quelle est la capitale de la France ?
    R√©ponse : [["generaliste"]]
    """

    prompt = f"{system_prompt}\n\nQuestion : {question}\nAgents :"
    response = llm.invoke(prompt)
    print(f"üß† Coordinateur : {response.content}")

    # üî• Extraire la premi√®re liste trouv√©e
    match = re.search(r"\[\[.*?\]\]", response.content, re.DOTALL)
    if not match:
        raise ValueError("Aucune liste d'agents trouv√©e dans la r√©ponse du coordinateur.")

    agents_list_str = match.group(0)
    print(f"‚úÖ Liste extraite : {agents_list_str}")
    return eval(agents_list_str)

